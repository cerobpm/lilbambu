if(is.vector(SiteCode)) {
filter = paste(filter,' and "SeriesCatalogView"."SiteCode" in (',paste(paste("'",SiteCode,"'",sep=''),collapse=','),')',sep='')
} else {
filter = paste(filter,' and "SeriesCatalogView"."SiteCode"=\'',SiteCode,'\'',sep='')
}
if(is.vector(VariableCode)) {
filter = paste(filter,' and "SeriesCatalogView"."VariableCode" in (',paste(paste("'",VariableCode,"'",sep=''),collapse=','),')',sep='')
} else {
filter = paste(filter,' and "SeriesCatalogView"."VariableCode"=\'',VariableCode,'\'',sep='')
}
} else {
stop("Falta SeriesID o SiteCode+VariableCode")
}
}
if(is.null(StartDate)) { stop("Falta StartDate")}
if(is.null(EndDate)) { stop("Falta EndDate")}
statement=paste('select "DataValues"."LocalDateTime" as "DateTime", "DataValues"."DataValue", "DataValues"."UTCOffset",
"DataValues"."CensorCode", "DataValues"."DateTimeUTC","DataValues"."MethodID","DataValues"."SourceID","SeriesCatalogView"."QualityControlLevelCode",
"SeriesCatalogView"."SeriesID","SeriesCatalogView"."SiteCode","SeriesCatalogView"."VariableCode","SeriesCatalogView"."VariableName"
from "DataValues","SeriesCatalogView" where "DataValues"."SiteID"="SeriesCatalogView"."SiteID" and "DataValues"."VariableID"="SeriesCatalogView"."VariableID"
and "DataValues"."DateTimeUTC">=\'',StartDate,'\' and "DataValues"."DateTimeUTC" <=\'',EndDate,'\'',filter,' order by "SeriesID","DateTimeUTC"',sep='')
#message(statement)
data<-rbind(data,dbGetQuery(con,statement))
if(length(data)==0) stop("No se encontraron registros para los parametros seleccionados")
message(paste("Se encontraron ",length(data[,1])," registros. ",sep=''))
return(data)
}
values<-GetValuesFromODM(con,SiteCode='alturas_prefe:155')
values<-GetValuesFromODM(con,SiteCode='alturas_prefe:155',VariableCode='2')
values<-GetValuesFromODM(con,SiteCode='alturas_prefe:155',VariableCode='2',StartDate='20180701',EndDate='20180718')
siteinfo=GetSiteInfoFromODM(con,SiteCode='alturas_prefe:155',VariableCode='2')
siteinfo
siteinfo[,1]
length(siteinfo[,1])
length(siteinfo$SeriesID)
GetSiteInfoFromODM<-function(con,SiteCode,VariableCode=NULL,MethodID=NULL,SourceID=NULL) {
filter=''
if(!is.null(VariableCode)) {
if(is.vector(VariableCode)) {
filter=paste(filter," and \"Variables\".\"VariableCode\" in (",paste(paste("'",VariableCode,"'",sep=''),collapse=','),")",sep='')
} else {
filter=paste(filter," and \"Variables\".\"VariableCode\"='",VariableCode,"'",sep='')
}
}
if(!is.null(MethodID)) {
if(is.vector(MethodID)) {
filter=paste(filter," and \"Methods\".\"MethodID\" in (",paste(MethodID,collapse=','),")",sep='')
} else {
filter=paste(filter," and \"Methods\".\"MethodID\"=",MethodID,sep='')
}
}
if(!is.null(SourceID)) {
if(is.vector(SourceID)) {
filter=paste(filter," and \"Sources\".\"SourceID\" in (",paste(SourceID,collapse=','),")",sep='')
} else {
filter=paste(filter," and \"Sources\".\"SourceID\"=",SourceID,sep='')
}
}
stmt = paste('select "SeriesID","Sites"."SiteID","Sites"."SiteCode","Sites"."SiteName","Sites"."Latitude","Sites"."Longitude",
"Sites"."Elevation_m","Sites"."State","Sites"."County","Sites"."Country","Sites"."Comments","Sites"."FeatureType",
"Variables"."VariableCode","Variables"."VariableName","Variables"."ValueType","Variables"."DataType","Variables"."GeneralCategory",
"Variables"."SampleMedium","Units"."UnitsName", "Units"."UnitsType","Units"."UnitsAbbreviation", "Variables"."NoDataValue",
"Variables"."IsRegular",timeunits."UnitsName" as "TimeUnitsName",timeunits."UnitsAbbreviation" as "TimeUnitsAbbreviation",
"Variables"."TimeSupport","Variables"."Speciation","Methods"."MethodID","Methods"."MethodCode","Methods"."MethodDescription",
"Methods"."MethodLink","Sources"."SourceID","Sources"."Organization",
"Sources"."SourceDescription","Sources"."Citation","QualityControlLevels"."QualityControlLevelID","QualityControlLevels"."QualityControlLevelCode","QualityControlLevels"."Definition" as "QualityControlLevelDefinition",
"SeriesCatalogView"."ValueCount","SeriesCatalogView"."BeginDateTime","SeriesCatalogView"."EndDateTime","SeriesCatalogView"."BeginDateTimeUTC","SeriesCatalogView"."EndDateTimeUTC"
from "Sites","SeriesCatalogView","Variables","Methods","Sources","Units",(select * from "Units") timeunits,"QualityControlLevels"
where "Sites"."SiteCode"=\'',SiteCode,'\' and "Sites"."SiteID"="SeriesCatalogView"."SiteID" and "SeriesCatalogView"."VariableUnitsID"="Units"."UnitsID"
and "Variables"."VariableCode"="SeriesCatalogView"."VariableCode" and "Methods"."MethodID"="SeriesCatalogView"."MethodID"
and "Sources"."SourceID"="SeriesCatalogView"."SourceID" and timeunits."UnitsID"="SeriesCatalogView"."TimeUnitsID"
and "QualityControlLevels"."QualityControlLevelID"="SeriesCatalogView"."QualityControlLevelID"',filter,sep='')
#message(stmt)
siteinfo=dbGetQuery(con,stmt)
if(length(sites)==0) stop("No se encontraron variables observadas para los parametros seleccionados")
message(paste("Se obtuvieron ",length(siteinfo$SeriesID)," variables observadas. ",sep=''))
return(siteinfo)
}
siteinfo=GetSiteInfoFromODM(con,SiteCode='alturas_prefe:155',VariableCode='2')
GetSiteInfoFromODM<-function(con,SiteCode,VariableCode=NULL,MethodID=NULL,SourceID=NULL) {
filter=''
if(!is.null(VariableCode)) {
if(is.vector(VariableCode)) {
filter=paste(filter," and \"Variables\".\"VariableCode\" in (",paste(paste("'",VariableCode,"'",sep=''),collapse=','),")",sep='')
} else {
filter=paste(filter," and \"Variables\".\"VariableCode\"='",VariableCode,"'",sep='')
}
}
if(!is.null(MethodID)) {
if(is.vector(MethodID)) {
filter=paste(filter," and \"Methods\".\"MethodID\" in (",paste(MethodID,collapse=','),")",sep='')
} else {
filter=paste(filter," and \"Methods\".\"MethodID\"=",MethodID,sep='')
}
}
if(!is.null(SourceID)) {
if(is.vector(SourceID)) {
filter=paste(filter," and \"Sources\".\"SourceID\" in (",paste(SourceID,collapse=','),")",sep='')
} else {
filter=paste(filter," and \"Sources\".\"SourceID\"=",SourceID,sep='')
}
}
stmt = paste('select "SeriesID","Sites"."SiteID","Sites"."SiteCode","Sites"."SiteName","Sites"."Latitude","Sites"."Longitude",
"Sites"."Elevation_m","Sites"."State","Sites"."County","Sites"."Country","Sites"."Comments","Sites"."FeatureType",
"Variables"."VariableCode","Variables"."VariableName","Variables"."ValueType","Variables"."DataType","Variables"."GeneralCategory",
"Variables"."SampleMedium","Units"."UnitsName", "Units"."UnitsType","Units"."UnitsAbbreviation", "Variables"."NoDataValue",
"Variables"."IsRegular",timeunits."UnitsName" as "TimeUnitsName",timeunits."UnitsAbbreviation" as "TimeUnitsAbbreviation",
"Variables"."TimeSupport","Variables"."Speciation","Methods"."MethodID","Methods"."MethodCode","Methods"."MethodDescription",
"Methods"."MethodLink","Sources"."SourceID","Sources"."Organization",
"Sources"."SourceDescription","Sources"."Citation","QualityControlLevels"."QualityControlLevelID","QualityControlLevels"."QualityControlLevelCode","QualityControlLevels"."Definition" as "QualityControlLevelDefinition",
"SeriesCatalogView"."ValueCount","SeriesCatalogView"."BeginDateTime","SeriesCatalogView"."EndDateTime","SeriesCatalogView"."BeginDateTimeUTC","SeriesCatalogView"."EndDateTimeUTC"
from "Sites","SeriesCatalogView","Variables","Methods","Sources","Units",(select * from "Units") timeunits,"QualityControlLevels"
where "Sites"."SiteCode"=\'',SiteCode,'\' and "Sites"."SiteID"="SeriesCatalogView"."SiteID" and "SeriesCatalogView"."VariableUnitsID"="Units"."UnitsID"
and "Variables"."VariableCode"="SeriesCatalogView"."VariableCode" and "Methods"."MethodID"="SeriesCatalogView"."MethodID"
and "Sources"."SourceID"="SeriesCatalogView"."SourceID" and timeunits."UnitsID"="SeriesCatalogView"."TimeUnitsID"
and "QualityControlLevels"."QualityControlLevelID"="SeriesCatalogView"."QualityControlLevelID"',filter,sep='')
#message(stmt)
siteinfo=dbGetQuery(con,stmt)
if(length(siteinfo)==0) stop("No se encontraron variables observadas para los parametros seleccionados")
message(paste("Se obtuvieron ",length(siteinfo$SeriesID)," variables observadas. ",sep=''))
return(siteinfo)
}
siteinfo=GetSiteInfoFromODM(con,SiteCode='alturas_prefe:155',VariableCode='2')
siteinfo=GetSiteInfoFromODM(con,SiteCode='alturas_prefe:155')
siteinfo=GetSiteInfoFromODM(con,SiteCode='alturas_dinac:155')
siteinfo
siteinfo=GetSiteInfoFromODM(con,SiteCode='alturas_dinac:155',VariableCode='2')
values<-GetValuesFromODM(con,SiteCode='alturas_dinac:155',VariableCode='2',StartDate='20180701',EndDate='20180718')
values
plot(values$DataValue~values$DateTime)
values<-GetValuesFromODM(con,SiteCode='alturas_dinac:155',VariableCode='2',StartDate='20100701',EndDate='20180718')
plot(values$DataValue~values$DateTime)
document()
setwd('..')
install("lilbambu")
Values<-GetValuesFromODM(con,SiteCode=c('alturas_dinac:155',alturas_dinac:153'),VariableCode='2',StartDate='2010-01-01',EndDate='2015-01-01')
Values<-GetValuesFromODM(con,SiteCode=c('alturas_dinac:155','alturas_dinac:153'),VariableCode='2',StartDate='2010-01-01',EndDate='2015-01-01')
Values
Values1<-GetValuesFromODM(con,SiteCode='alturas_dinac:155',VariableCode='2',StartDate='2010-01-01',EndDate='2015-01-01')
Values2<-GetValuesFromODM(con,SiteCode='alturas_dinac:153',VariableCode='2',StartDate='2010-01-01',EndDate='2015-01-01')
Values<-rbind(Values1,Values2)
Values
plot(Values1$DataValue~Values1$DateTime)
lines(Values2$DataValue~Values2$DateTime)
varnames=unique(Values$VariableName)
varnames
output=NULL
types=c('l')
width=800
height=700
invert=c(FALSE)
StartDate=NULL
EndDate=NULL
types=if (length(varnames) > length(types)) rep(types,length(varnames)) else types
types
types=types[1:length(varnames)]
axisides=c(2,4)
colors=seq(1,50,1)
invert=rep(invert,length(varnames))
k=1
legend=c()
lcolors=c()
lty=c()
pch=c()
i=1
subset=Values[Values$VariableName==varnames[i],]
subset
ylim = if (invert[i]) c(max(subset$value),min(subset$value)) else c(min(subset$value),max(subset$value))
ylim = if (invert[i]) c(max(subset$DataValue),min(subset$DataValue)) else c(min(subset$DataValue),max(subset$DataValue))
ylim
xlim= c(if (!is.null(StartDate)) as.Date(StartDate) else  min(as.Date(Values$DateTimeUTC)),if (!is.null(EndDate)) as.Date(EndDate) else max(as.Date(Values$DateTimeUTC)))
xlim
par(mar=c(5.5,3.8,4.5,4.1),xpd=FALSE)
plot(0,type="n",xlim=xlim,ylim=ylim,xlab='time',axes=FALSE,ylab=varnames[i])
v=as.numeric(axis.Date(1, seq(min(Values$DateTimeUTC),max(Values$DateTimeUTC),length.out=10), format='%y-%m-%d'))
v
abline(v=v,lty=3)
roundto = if(varnames[i]=='altura') 2 else 0
axis(axisides[i],round(seq(min(subset$DataValue),max(subset$DataValue),length.out=10),roundto))
abline(h=round(seq(min(subset$DataValue),max(subset$DataValue),length.out=10),roundto),lty=3)
s_ids=unique(subset$seriesID)
s_ids
s_ids=unique(subset$SeriesID)
s_ids
unique(subset$SiteCode)
SiteCode=unique(subset$SiteCode)[1]
SiteCode
subsubset <- subset[subset$SiteCode == SiteCode,]
subsubset
if(types[i]=='p') {
points(subsubset$DataValue~as.Date(subsubset$DateTimeUTC),type='p',pch=16,cex=0.5,xaxt = 'n', yaxt = 'n',xlab=NA,ylab=NA,col=colors[k])
} else {
lines(subsubset$DataValue~as.Date(subsubset$DateTimeUTC),type=types[i],pch=16,cex=0.5,xaxt = 'n', yaxt = 'n',xlab=NA,ylab=NA,col=colors[k])
}
lty=c(lty,if(types[i]=='l' || types[i]=='s') 1 else NA)
pch=c(pch,if(types[i]=='p') 20 else NA)
View(subsubset)
unique(subsubset$siteName)
unique(cbind(subset$SiteCode,subset$VariableCode))
unique(subset(subset, select=c(SiteCode,VariableCode)))
Series=unique(subset(subset, select=c(SiteCode,VariableCode)))
Series
j=1
SiteCode=Series$SiteCode[j]
SiteCode
VariableCode=Series$VariableCode[j]
VariableCode
subsubset <- subset[subset$SiteCode == SiteCode && subset$VariableCode == VariableCode,]
subsubset
thisLegendElem = paste(VariableCode,'@',SiteCode,sep='')
thisLegendElem
legend=c(legend,thisLegendElem)
lcolors=c(lcolors,colors[k])
k=k+1
if(FALSE %in% is.na(lty)) {
legend('top',legend,col=lcolors,lty=lty,pch=pch,horiz=TRUE)
} else {
legend('top',legend,col=lcolors,pch=pch,horiz=TRUE)
}
PlotValuesODM<-function(Values,output=NULL,types=c('l'),width=800,height=700,invert=c(FALSE),StartDate=NULL,EndDate=NULL) {
if(!is.null(output)) {
png(output,width = width, height = height)
} else {
x11(width=width/72,height=height/72)
}
varnames=unique(Values$VariableName)
if(length(varnames)>2) {
stop('max 2 variables')
return(1);
}
types=if (length(varnames) > length(types)) rep(types,length(varnames)) else types
types=types[1:length(varnames)]
axisides=c(2,4)
colors=seq(1,50,1)
invert=rep(invert,length(varnames))
k=1
legend=c()
lcolors=c()
lty=c()
pch=c()
for (i in 1:length(varnames)) {
subset=Values[Values$VariableName==varnames[i],]
ylim = if (invert[i]) c(max(subset$DataValue),min(subset$DataValue)) else c(min(subset$DataValue),max(subset$DataValue))
xlim= c(if (!is.null(StartDate)) as.Date(StartDate) else  min(as.Date(Values$DateTimeUTC)),if (!is.null(EndDate)) as.Date(EndDate) else max(as.Date(Values$DateTimeUTC)))
if(i==1) {
par(mar=c(5.5,3.8,4.5,4.1),xpd=FALSE)
plot(0,type="n",xlim=xlim,ylim=ylim,xlab='time',axes=FALSE,ylab=varnames[i])
v=as.numeric(axis.Date(1, seq(min(Values$DateTimeUTC),max(Values$DateTimeUTC),length.out=10), format='%y-%m-%d'))
abline(v=v,lty=3)
} else {
par(new = TRUE)
plot(0,type="n",xlim=xlim,ylim=ylim,xlab=NA,axes=FALSE,ylab=NA)
mtext(varnames[i],side=4,line=2)
}
roundto = if(varnames[i]=='altura') 2 else 0
axis(axisides[i],round(seq(min(subset$DataValue),max(subset$DataValue),length.out=10),roundto))
abline(h=round(seq(min(subset$DataValue),max(subset$DataValue),length.out=10),roundto),lty=3)
Series=unique(subset(subset, select=c(SiteCode,VariableCode)))
for(j in 1:nrow(Series)) {
SiteCode=Series$SiteCode[j]
VariableCode=Series$VariableCode[j]
subsubset <- subset[subset$SiteCode == SiteCode && subset$VariableCode == VariableCode,]
if(types[i]=='p') {
points(subsubset$DataValue~as.Date(subsubset$DateTimeUTC),type='p',pch=16,cex=0.5,xaxt = 'n', yaxt = 'n',xlab=NA,ylab=NA,col=colors[k])
} else {
lines(subsubset$DataValue~as.Date(subsubset$DateTimeUTC),type=types[i],pch=16,cex=0.5,xaxt = 'n', yaxt = 'n',xlab=NA,ylab=NA,col=colors[k])
}
lty=c(lty,if(types[i]=='l' || types[i]=='s') 1 else NA)
pch=c(pch,if(types[i]=='p') 20 else NA)
thisLegendElem = paste(VariableCode,'@',SiteCode,sep='')
legend=c(legend,thisLegendElem)
lcolors=c(lcolors,colors[k])
k=k+1
}
}
if(FALSE %in% is.na(lty)) {
legend('top',legend,col=lcolors,lty=lty,pch=pch,horiz=TRUE)
} else {
legend('top',legend,col=lcolors,pch=pch,horiz=TRUE)
}
if(!is.null(output)) {
dev.off()
message(paste("Se imprimio el plot en el archivo ",output,sep=''))
}
return(0)
}
PlotValuesODM(Values)
PlotValuesODM<-function(Values,output=NULL,types=c('l'),width=800,height=700,invert=c(FALSE),StartDate=NULL,EndDate=NULL) {
if(!is.null(output)) {
png(output,width = width, height = height)
} else {
x11(width=width/72,height=height/72)
}
varnames=unique(Values$VariableName)
if(length(varnames)>2) {
stop('max 2 variables')
return(1);
}
types=if (length(varnames) > length(types)) rep(types,length(varnames)) else types
types=types[1:length(varnames)]
axisides=c(2,4)
colors=seq(1,50,1)
invert=rep(invert,length(varnames))
k=1
legend=c()
lcolors=c()
lty=c()
pch=c()
for (i in 1:length(varnames)) {
subset=Values[Values$VariableName==varnames[i],]
ylim = if (invert[i]) c(max(subset$DataValue),min(subset$DataValue)) else c(min(subset$DataValue),max(subset$DataValue))
xlim= c(if (!is.null(StartDate)) as.Date(StartDate) else  min(as.Date(Values$DateTimeUTC)),if (!is.null(EndDate)) as.Date(EndDate) else max(as.Date(Values$DateTimeUTC)))
if(i==1) {
par(mar=c(5.5,3.8,4.5,4.1),xpd=FALSE)
plot(0,type="n",xlim=xlim,ylim=ylim,xlab='time',axes=FALSE,ylab=varnames[i])
v=as.numeric(axis.Date(1, seq(min(Values$DateTimeUTC),max(Values$DateTimeUTC),length.out=10), format='%y-%m-%d'))
abline(v=v,lty=3)
} else {
par(new = TRUE)
plot(0,type="n",xlim=xlim,ylim=ylim,xlab=NA,axes=FALSE,ylab=NA)
mtext(varnames[i],side=4,line=2)
}
roundto = if(varnames[i]=='altura') 2 else 0
axis(axisides[i],round(seq(min(subset$DataValue),max(subset$DataValue),length.out=10),roundto))
abline(h=round(seq(min(subset$DataValue),max(subset$DataValue),length.out=10),roundto),lty=3)
Series=unique(subset(subset, select=c(SiteCode,VariableCode)))
for(j in 1:nrow(Series)) {
SiteCode=Series$SiteCode[j]
VariableCode=Series$VariableCode[j]
subsubset <- subset[subset$SiteCode == SiteCode && subset$VariableCode == VariableCode,]
if(types[i]=='p') {
points(subsubset$DataValue~as.Date(subsubset$DateTimeUTC),type='p',pch=16,cex=0.5,xaxt = 'n', yaxt = 'n',xlab=NA,ylab=NA,col=colors[k])
} else {
lines(subsubset$DataValue~as.Date(subsubset$DateTimeUTC),type=types[i],pch=16,cex=0.5,xaxt = 'n', yaxt = 'n',xlab=NA,ylab=NA,col=colors[k])
}
lty=c(lty,if(types[i]=='l' || types[i]=='s') 1 else NA)
pch=c(pch,if(types[i]=='p') 20 else NA)
thisLegendElem = paste(VariableCode,'@',SiteCode,sep='')
legend=c(legend,thisLegendElem)
lcolors=c(lcolors,colors[k])
k=k+1
}
}
if(FALSE %in% is.na(lty)) {
legend('top',legend,col=lcolors,lty=lty,pch=pch,fill="white",horiz=TRUE)
} else {
legend('top',legend,col=lcolors,pch=pch,fill="white",horiz=TRUE)
}
if(!is.null(output)) {
dev.off()
message(paste("Se imprimio el plot en el archivo ",output,sep=''))
}
return(0)
}
PlotValuesODM(Values)
PlotValuesODM<-function(Values,output=NULL,types=c('l'),width=800,height=700,invert=c(FALSE),StartDate=NULL,EndDate=NULL) {
if(!is.null(output)) {
png(output,width = width, height = height)
} else {
x11(width=width/72,height=height/72)
}
varnames=unique(Values$VariableName)
if(length(varnames)>2) {
stop('max 2 variables')
return(1);
}
types=if (length(varnames) > length(types)) rep(types,length(varnames)) else types
types=types[1:length(varnames)]
axisides=c(2,4)
colors=seq(1,50,1)
invert=rep(invert,length(varnames))
k=1
legend=c()
lcolors=c()
lty=c()
pch=c()
for (i in 1:length(varnames)) {
subset=Values[Values$VariableName==varnames[i],]
ylim = if (invert[i]) c(max(subset$DataValue),min(subset$DataValue)) else c(min(subset$DataValue),max(subset$DataValue))
xlim= c(if (!is.null(StartDate)) as.Date(StartDate) else  min(as.Date(Values$DateTimeUTC)),if (!is.null(EndDate)) as.Date(EndDate) else max(as.Date(Values$DateTimeUTC)))
if(i==1) {
par(mar=c(5.5,3.8,4.5,4.1),xpd=FALSE)
plot(0,type="n",xlim=xlim,ylim=ylim,xlab='time',axes=FALSE,ylab=varnames[i])
v=as.numeric(axis.Date(1, seq(min(Values$DateTimeUTC),max(Values$DateTimeUTC),length.out=10), format='%y-%m-%d'))
abline(v=v,lty=3)
} else {
par(new = TRUE)
plot(0,type="n",xlim=xlim,ylim=ylim,xlab=NA,axes=FALSE,ylab=NA)
mtext(varnames[i],side=4,line=2)
}
roundto = if(varnames[i]=='altura') 2 else 0
axis(axisides[i],round(seq(min(subset$DataValue),max(subset$DataValue),length.out=10),roundto))
abline(h=round(seq(min(subset$DataValue),max(subset$DataValue),length.out=10),roundto),lty=3)
Series=unique(subset(subset, select=c(SiteCode,VariableCode)))
for(j in 1:nrow(Series)) {
SiteCode=Series$SiteCode[j]
VariableCode=Series$VariableCode[j]
subsubset <- subset[subset$SiteCode == SiteCode && subset$VariableCode == VariableCode,]
if(types[i]=='p') {
points(subsubset$DataValue~as.Date(subsubset$DateTimeUTC),type='p',pch=16,cex=0.5,xaxt = 'n', yaxt = 'n',xlab=NA,ylab=NA,col=colors[k])
} else {
lines(subsubset$DataValue~as.Date(subsubset$DateTimeUTC),type=types[i],pch=16,cex=0.5,xaxt = 'n', yaxt = 'n',xlab=NA,ylab=NA,col=colors[k])
}
lty=c(lty,if(types[i]=='l' || types[i]=='s') 1 else NA)
pch=c(pch,if(types[i]=='p') 20 else NA)
thisLegendElem = paste(VariableCode,'@',SiteCode,sep='')
legend=c(legend,thisLegendElem)
lcolors=c(lcolors,colors[k])
k=k+1
}
}
if(FALSE %in% is.na(lty)) {
legend('top',legend,col=lcolors,lty=lty,pch=pch,bg="white",horiz=TRUE)
} else {
legend('top',legend,col=lcolors,pch=pch,bg="white",horiz=TRUE)
}
if(!is.null(output)) {
dev.off()
message(paste("Se imprimio el plot en el archivo ",output,sep=''))
}
return(0)
}
PlotValuesODM(Values)
subsubset <- subset[subset$SiteCode == SiteCode && subset$VariableCode == VariableCode,]
subsubset <- subset(subset,SiteCode == SiteCode & VariableCode == VariableCode)
subsubset
subset
SiteCode
VariableCode
Sitecode=Series$SiteCode[2]
SiteCode=Series$SiteCode[2]
SiteCode
subsubset <- subset(subset,SiteCode == SiteCode & VariableCode == VariableCode)
subsubset
thisvarvalues=subset
subsubset <- subset(thisvarvalues,SiteCode == SiteCode & VariableCode == VariableCode)
subsubset
subsubset <- subset(thisvarvalues,subset$SiteCode == SiteCode & subset$VariableCode == VariableCode)
subsubset <- subset(thisvarvalues,subset$SiteCode == 'alturas_prefe:155' & subset$VariableCode == VariableCode)
subsubset <- subset(thisvarvalues,subset$SiteCode == 'alturas_dinac:155' & subset$VariableCode == VariableCode)
ThisSiteCode=Series$SiteCode[j]
ThisVariableCode=Series$VariableCode[j]
subsubset <- subset(subset,SiteCode == thisSiteCode & VariableCode == ThisVariableCode)
subsubset <- subset(subset,SiteCode == ThisSiteCode & VariableCode == ThisVariableCode)
PlotValuesODM<-function(Values,output=NULL,types=c('l'),width=800,height=700,invert=c(FALSE),StartDate=NULL,EndDate=NULL) {
if(!is.null(output)) {
png(output,width = width, height = height)
} else {
x11(width=width/72,height=height/72)
}
varnames=unique(Values$VariableName)
if(length(varnames)>2) {
stop('max 2 variables')
return(1);
}
types=if (length(varnames) > length(types)) rep(types,length(varnames)) else types
types=types[1:length(varnames)]
axisides=c(2,4)
colors=seq(1,50,1)
invert=rep(invert,length(varnames))
k=1
legend=c()
lcolors=c()
lty=c()
pch=c()
for (i in 1:length(varnames)) {
subset=Values[Values$VariableName==varnames[i],]
ylim = if (invert[i]) c(max(subset$DataValue),min(subset$DataValue)) else c(min(subset$DataValue),max(subset$DataValue))
xlim= c(if (!is.null(StartDate)) as.Date(StartDate) else  min(as.Date(Values$DateTimeUTC)),if (!is.null(EndDate)) as.Date(EndDate) else max(as.Date(Values$DateTimeUTC)))
if(i==1) {
par(mar=c(5.5,3.8,4.5,4.1),xpd=FALSE)
plot(0,type="n",xlim=xlim,ylim=ylim,xlab='time',axes=FALSE,ylab=varnames[i])
v=as.numeric(axis.Date(1, seq(min(Values$DateTimeUTC),max(Values$DateTimeUTC),length.out=10), format='%y-%m-%d'))
abline(v=v,lty=3)
} else {
par(new = TRUE)
plot(0,type="n",xlim=xlim,ylim=ylim,xlab=NA,axes=FALSE,ylab=NA)
mtext(varnames[i],side=4,line=2)
}
roundto = if(varnames[i]=='altura') 2 else 0
axis(axisides[i],round(seq(min(subset$DataValue),max(subset$DataValue),length.out=10),roundto))
abline(h=round(seq(min(subset$DataValue),max(subset$DataValue),length.out=10),roundto),lty=3)
Series=unique(subset(subset, select=c(SiteCode,VariableCode)))
for(j in 1:nrow(Series)) {
ThisSiteCode=Series$SiteCode[j]
ThisVariableCode=Series$VariableCode[j]
subsubset <- subset(subset,SiteCode == ThisSiteCode & VariableCode == ThisVariableCode)
if(types[i]=='p') {
points(subsubset$DataValue~as.Date(subsubset$DateTimeUTC),type='p',pch=16,cex=0.5,xaxt = 'n', yaxt = 'n',xlab=NA,ylab=NA,col=colors[k])
} else {
lines(subsubset$DataValue~as.Date(subsubset$DateTimeUTC),type=types[i],pch=16,cex=0.5,xaxt = 'n', yaxt = 'n',xlab=NA,ylab=NA,col=colors[k])
}
lty=c(lty,if(types[i]=='l' || types[i]=='s') 1 else NA)
pch=c(pch,if(types[i]=='p') 20 else NA)
thisLegendElem = paste(ThisVariableCode,'@',ThisSiteCode,sep='')
legend=c(legend,thisLegendElem)
lcolors=c(lcolors,colors[k])
k=k+1
}
}
if(FALSE %in% is.na(lty)) {
legend('top',legend,col=lcolors,lty=lty,pch=pch,bg="white",horiz=TRUE)
} else {
legend('top',legend,col=lcolors,pch=pch,bg="white",horiz=TRUE)
}
if(!is.null(output)) {
dev.off()
message(paste("Se imprimio el plot en el archivo ",output,sep=''))
}
return(0)
}
PlotValuesODM(Values)
